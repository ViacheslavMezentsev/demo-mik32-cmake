/**
 * @file
 * Модуль сторожевого таймера
 * 
 * Модуль сторожевого таймера (WDT) реализует функцию контроля «зависания» 
 * исполняемой программы. Сторожевой таймер должен быть проинициализирован 
 * и запущен в начале работы программы. После чего он самостоятельно отсчитывает 
 * заданное время, и если в течение этого времени программа не перезагрузит его, 
 * то таймер вырабатывает сигнал сброса системы. За 256 тактов до окончания заданного 
 * времени таймер дополнительно выдает сигнал прерывания.
 * 
 * В модуле реализована защита от случайного изменения содержимого регистров со стороны программы.
 */

#ifndef WDT_H_INCLUDED
#define WDT_H_INCLUDED


#define WDT_KEY                 0x9C
#define WDT_CON                 0x84
#define WDT_STA                 0x9C


#define WDT_KEY_UNLOCK          0x1E
#define WDT_KEY_START           0x71
#define WDT_KEY_STOP            0xE8

#define WDT_INTERRUPT_THRESHOLD 0x100

// Перечень значений регистра конфигурации сторожевого таймера (CON)

#define WDT_CON_PRELOAD_S       0
/// Маска для установки начального значения таймера при запуске или перезапуске
#define WDT_CON_PRELOAD_M       (0xFFF << WDT_CON_PRELOAD_S)
/// Установить начальное значение таймера при запуске или перезапуске (таймер считывает в сторону увеличения значений)
#define WDT_CON_PRELOAD(v)      (((v) << WDT_CON_PRELOAD_S) & WDT_CON_PRELOAD_M)

/**
 * Сторожевой таймер тактируется независимым внутренним сигналом, благодаря чему он продолжает работу, 
 * даже если пропадает системный тактовый сигнал. Таймер состоит из 12-разрядного счетчика тактов 
 * с 12-ти разрядным предварительным делителем. Таким образом, максимально возможный интервал времени 
 * составляет 224 тактов. Fclk - частота внутреннего осциллятора таймера.
 */

//TODO: не указано, какая частота у внутреннего осциллятора

#define WDT_CON_PRESCALE_S      12
#define WDT_CON_PRESCALE_M      (0x7 << WDT_CON_PRESCALE_S)
/// Не использовать делитель входной частоты для таймера 
#define WDT_CON_PRESCALE_1_M    (0x0 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 2
#define WDT_CON_PRESCALE_2_M    (0x1 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 4
#define WDT_CON_PRESCALE_4_M    (0x2 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 16
#define WDT_CON_PRESCALE_16_M   (0x3 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 64
#define WDT_CON_PRESCALE_64_M   (0x4 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 256
#define WDT_CON_PRESCALE_256_M  (0x5 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 1024
#define WDT_CON_PRESCALE_1024_M (0x6 << WDT_CON_PRESCALE_S)
/// Установить делитель частоты Fclk / 4096
#define WDT_CON_PRESCALE_4096_M (0x7 << WDT_CON_PRESCALE_S)

// Перечень значений регистра состояния сторожевого таймера (STA )

/** Бит активности таймера изменяет свое значение через некоторое время после обращения к регистру KEY, 
 * необходимое для проведения синхронизации сигналов. 
*/

#define WDT_STA_ENABLED_S       0
// Маска для бита активности таймера (1 - запущен, 0 - остановлен)
#define WDT_STA_ENABLED_M       (1 << WDT_STA_ENABLED_S)

#define WDT_STA_LOADING_S       1
/// Маска для бита перезагрузки таймера (1 - выполняется, 0 - не выполняется)
#define WDT_STA_LOADING_M       (1 << WDT_STA_LOADING_S)

#define WDT_STA_RST_FLAG_S      8
/// Флаг генерации сброса сторожевым таймером. Сбрасывается в 0 только при снятии и последующей подаче питания
#define WDT_STA_RST_FLAG_M      (1 << WDT_STA_RST_FLAG_S)

/**
 * Для записи конфигурации модуля необходимо выполнить процедуру разблокировки. 
 * Для этого в регистр KEY нужно записать значение 0x1E. Блокировка активируется 
 * через 15 тактов или при выполнении записи в какой-либо регистр. 
 * Для запуска или перезагрузки значения сторожевого таймера в регистр KEY 
 * необходимо записать значение 0x71. Для остановки сторожевого таймера 
 * в регистр KEY необходимо записать значение 0xE8.
 */

#ifndef __ASSEMBLER__
    #include <inttypes.h> 
    /// @brief Структура регистров модуля сторожевого таймера.
    typedef struct
    {
        union 
        {
            struct 
            {
                volatile uint8_t _space_Key[WDT_KEY];
                volatile uint8_t KEY;                       ///< [WO]: Регистр ключа. 
            };
            struct 
            {
                volatile uint8_t _space_Con[WDT_CON];
                volatile uint32_t CON;                      ///< [RW]: Регистр конфигурации. Биты [14:0] хранят параметры конфигурации. Обновление регистра возможно только в остановленном состоянии сторожевого таймера.
            };
            struct 
            {
                volatile uint8_t _space_Sta[WDT_STA];
                volatile uint32_t STA;                      ///< [RO]: Регистр состояния. Биты [1:0] и [8] кодируют режимы состояния сторожевого таймера.
            };
        };
    } WDT_TypeDef;
#endif

#endif // WDT_H_INCLUDED
